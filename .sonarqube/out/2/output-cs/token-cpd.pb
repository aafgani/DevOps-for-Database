Û
aC:\Users\Andrya_A354\source\repos\DevOps for Database\BusinessLogic\Implementations\Calculator.cs
	namespace 	
Core
 
. 
Implementations 
{ 
public 

class 

Calculator 
: 
ICalculator )
{		 
public

 
double

 
Add

 
(

 
double

  
num1

! %
,

% &
double

' -
num2

. 2
)

2 3
{ 	
return 
num1 
+ 
num2 
; 
} 	
public 
double 
Divide 
( 
double #
num1$ (
,( )
double* 0
num21 5
)5 6
{ 	
throw 
new #
NotImplementedException -
(- .
). /
;/ 0
} 	
public 
double 
Multiply 
( 
double %
num1& *
,* +
double, 2
num23 7
)7 8
{ 	
throw 
new #
NotImplementedException -
(- .
). /
;/ 0
} 	
public 
double 
	Substract 
(  
double  &
num1' +
,+ ,
double- 3
num24 8
)8 9
{ 	
throw 
new #
NotImplementedException -
(- .
). /
;/ 0
} 	
} 
} µ)
fC:\Users\Andrya_A354\source\repos\DevOps for Database\BusinessLogic\Implementations\EmployeeService.cs
	namespace		 	
BusinessLogic		
 
.		 
Implementations		 '
{

 
public 

class 
EmployeeService  
:! "

Interfaces# -
.- .
IEmployeeService. >
{ 
private 
readonly 
IUnitOfWork $
_unitOfWork% 0
;0 1
public 
EmployeeService 
( 
IUnitOfWork *

unitOfWork+ 5
)5 6
{ 	
_unitOfWork 
= 

unitOfWork $
;$ %
} 	
public 
async 
Task 
< 
int 
> 
AddNewEmployeeAsync 2
(2 3
Employee3 ;
employee< D
)D E
{ 	
_unitOfWork 
. 

Repository "
(" #
)# $
.$ %
Add% (
(( )
employee) 1
)1 2
;2 3
await 
_unitOfWork 
. 
CommitAsync )
() *
)* +
;+ ,
return 
employee 
. 

EmployeeId &
;& '
} 	
public 
bool 
AnyEmployee 
(  
int  #
id$ &
)& '
{ 	
return 
_unitOfWork 
. 

Repository )
() *
)* +
.+ ,
Any, /
</ 0
Employee0 8
>8 9
(9 :
x: ;
=>< >
x? @
.@ A

EmployeeIdA K
==L N
idO Q
)Q R
;R S
} 	
public   
async   
Task   
DeleteEmployeeAsync   -
(  - .
Employee  . 6
employee  7 ?
)  ? @
{!! 	
_unitOfWork"" 
."" 

Repository"" "
(""" #
)""# $
.""$ %
Delete""% +
<""+ ,
Employee"", 4
>""4 5
(""5 6
employee""6 >
)""> ?
;""? @
await## 
_unitOfWork## 
.## 
CommitAsync## )
(##) *
)##* +
;##+ ,
}$$ 	
public&& 
async&& 
Task&& 
<&& 
List&& 
<&& 
Employee&& '
>&&' (
>&&( )
GetEmployeeAsync&&* :
(&&: ;
string&&; A
term&&B F
)&&F G
{'' 	
var(( 
emp(( 
=(( 
await(( 
_unitOfWork(( '
.((' (

Repository((( 2
(((2 3
)((3 4
.((4 5
	FindAsync((5 >
<((> ?
Employee((? G
>((G H
(((H I
x((I J
=>((K M
x((N O
.((O P
Fullname((P X
.((X Y
Contains((Y a
(((a b
term((b f
)((f g
)((g h
;((h i
return)) 
emp)) 
.)) 
ToList)) 
()) 
))) 
;))  
}** 	
public,, 
async,, 
Task,, 
<,, 
Employee,, "
>,," # 
GetEmployeeByIdAsync,,$ 8
(,,8 9
int,,9 <
id,,= ?
),,? @
{-- 	
var.. 
emp.. 
=.. 
await.. 
_unitOfWork.. '
...' (

Repository..( 2
(..2 3
)..3 4
...4 5 
SingleOrDefaultAsync..5 I
<..I J
Employee..J R
>..R S
(..S T
x..T U
=>..V X
x..Y Z
...Z [

EmployeeId..[ e
==..f h
id..i k
)..k l
;..l m
return// 
emp// 
;// 
}00 	
public22 
async22 
Task22 
<22 
List22 
<22 
Employee22 '
>22' (
>22( ) 
GetListEmployeeAsync22* >
(22> ?
)22? @
{33 	
var44 
emp44 
=44 
await44 
_unitOfWork44 '
.44' (

Repository44( 2
(442 3
)443 4
.444 5
List445 9
<449 :
Employee44: B
>44B C
(44C D
)44D E
;44E F
return55 
emp55 
.55 
ToList55 
(55 
)55 
;55  
}66 	
public88 
async88 
Task88 
UpdateEmployee88 (
(88( )
Employee88) 1
employee882 :
)88: ;
{99 	
_unitOfWork:: 
.:: 

Repository:: "
(::" #
)::# $
.::$ %
Update::% +
<::+ ,
Employee::, 4
>::4 5
(::5 6
employee::6 >
)::> ?
;::? @
await;; 
_unitOfWork;; 
.;; 
CommitAsync;; )
(;;) *
);;* +
;;;+ ,
}<< 	
}== 
}>> ë
]C:\Users\Andrya_A354\source\repos\DevOps for Database\BusinessLogic\Interfaces\ICalculator.cs
	namespace 	
Core
 
. 

Interfaces 
{ 
public 

	interface 
ICalculator  
{ 
double		 
Add		 
(		 
double		 
num1		 
,		 
double		  &
num2		' +
)		+ ,
;		, -
double

 
	Substract

 
(

 
double

 
num1

  $
,

$ %
double

& ,
num2

- 1
)

1 2
;

2 3
double 
Multiply 
( 
double 
num1 #
,# $
double% +
num2, 0
)0 1
;1 2
double 
Divide 
( 
double 
num1 !
,! "
double# )
num2* .
). /
;/ 0
} 
} å
bC:\Users\Andrya_A354\source\repos\DevOps for Database\BusinessLogic\Interfaces\IEmployeeService.cs
	namespace 	
BusinessLogic
 
. 

Interfaces "
{ 
public		 

	interface		 
IEmployeeService		 %
{

 
Task 
< 
List 
< 
Employee 
> 
>  
GetListEmployeeAsync 1
(1 2
)2 3
;3 4
Task 
< 
List 
< 
Employee 
> 
> 
GetEmployeeAsync -
(- .
string. 4
term5 9
)9 :
;: ;
Task 
< 
Employee 
>  
GetEmployeeByIdAsync +
(+ ,
int, /
id0 2
)2 3
;3 4
Task 
< 
int 
> 
AddNewEmployeeAsync %
(% &
Employee& .
employee/ 7
)7 8
;8 9
Task 
DeleteEmployeeAsync  
(  !
Employee! )
employee* 2
)2 3
;3 4
bool 
AnyEmployee 
( 
int 
id 
)  
;  !
Task 
UpdateEmployee 
( 
Employee $
employee% -
)- .
;. /
} 
} 